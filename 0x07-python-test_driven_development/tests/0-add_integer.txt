#0-add_integer.txt

===============================
 How to Use 0-add_integer.py
===============================

This library is very simple, since it only has one function called
``add_integer(a, b=98)``.

Numbers
=======

add_integer() returns the result of the addition of the two integers

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(3, 2)
    5

It also works with floating-point values. Note that floats are casted
to ints before the addition is performed.

::

    >>> add_integer(2.0, 3.3)
    5
    >>> add_integer(-2.5, -3.6)
    -5

Floating and non-floats can be combined

::

    >>> add_integer(2.3, 4)
    6
    >>> add_integer(1, 0.2)
    1

The second argument is optional - by default, it is 98.

::
    >>> add_integer(2)
    100


Non-Numbers
===========

The `+` operator does not work for objects wich are not floats or ints
hence it should raise a typerror for non-numbers.

::

    >>> add_integer('a', 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(3, 'b')
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None) #doctest: 
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1.2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are of the wrong type a TypeError is only printed
for the first argument.

::
    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function fails when infinity is passed on to it.

::
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The function returns a valueerror for NaN numbers

::
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(4, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


Missing-Arguments
=================

The method add_integer(a, b=98) should be called with 2 arguments one 
positional argument a must be provided while the b is optional since 
it is set to 98 if it is Missing.

::

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'