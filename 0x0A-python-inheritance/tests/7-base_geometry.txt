#7-base_geometry.txt

=============================
How to use 7-base_geometry.py
=============================

This module defines a geometry class

Usage
=====

The class contains two methods area() and an integer validatorinteger_validator methods

Tests
=====

We can create an instance of the class
::
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

When we try to make use of the area method in the class it raises an exception
::
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

The integer_validator method requires 2 positional arguments the first is name
which should always be a string and value wich should always be an positive integer
and always > 0
::
    >>> bg.integer_validator("One", 1)

::
    >>> bg.integer_validator("Negative One", -1)
    Traceback (most recent call last):
    ValueError: Negative One must be greater than 0

::
    >>> bg.integer_validator("number", 0)
    Traceback (most recent call last):
    ValueError: number must be greater than 0

::
    >>> bg.integer_validator("One", [1, 2]) 
    Traceback (most recent call last):
    TypeError: One must be an integer

when an incorrect number of positional arguments is passed, it raises a TypeError
::
    >>> bg.integer_validator("One") #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: integer_validator()...

::
    >>> bg.integer_validator("One", 21, 22) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: integer_validator()...

::
When a None type is passed it results into an TypeError

    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    TypeError: age must be an integer

::
When any another type other than an integer is passed it results into an TypeError

    >>> bg.integer_validator("age", {1,2,3})
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", [1,2,3])
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", "4")
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    TypeError: age must be an integer




::
When a boolean is passed it results into a TypeError

    >>> bg.integer_validator("age", False)
    Traceback (most recent call last):
    TypeError: age must be an integer
