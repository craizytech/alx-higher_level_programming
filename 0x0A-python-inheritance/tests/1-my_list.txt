#1-my_list.txt

=====================
How to use my_list.py
=====================

This module defines a class MyList that inherits form list
and a method that returns a sorted list

Usage
=====

`MyList` can be initialized with no arguments which will return an empty list
::
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::
    >>> print(my_list)
    []

It can only take a single argument which must be an iterable object.
::
    >>> my_list = MyList([1,2,3])
    >>> print(my_list)
    [1, 2, 3]

When a list that contains an element that isnt a list is passed
the function raises an error
::
    >>> my_list = MyList([3, 1, 'a', 5, 4])
    >>> my_list.print_sorted() #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: '<' not supported...

When an incorrect number of arguments is passed a TypeError is raised
::
    >>> my_list = MyList([1,2,3], [2,34,5]) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    TypeError: MyList.__init__()...

After creating an emptylist append can be used to add elements to it
::
    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list
    [3, 2]

__str__ can be used to print the MyList object
::
    >>> my_list = MyList([1,2,3,4])
    >>> print(my_list)
    [1, 2, 3, 4]

MyList is a subclass of the list class
::
    >>> issubclass(MyList, list)
    True

When the print_sorted is used it returns a new sorted list
::
    >>> my_list = MyList([1, 3, 2, 5, 4])
    >>> new_list = my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 3, 2, 5, 4]
    >>> print(new_list)
    [1, 2, 3, 4, 5]


